{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","weatherData","tempF","main","temp","Card","Content","className","name","moment","format","humidity","App","useState","lat","setLat","long","setLong","data","setData","fetchData","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTA0BeA,EArBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACfC,EAAiC,EAAxBD,EAAYE,KAAKC,KAAS,EAAK,GAC5C,OACA,cAACC,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,QAAN,UACI,sBAAKC,UAAU,OAAf,UACI,mBAAGA,UAAU,SAAb,SAAuBN,EAAYO,OACnC,sBAAKD,UAAU,OAAf,UACI,oBAAGA,UAAU,MAAb,kBAAyBE,MAASC,OAAO,WACzC,mBAAGH,UAAU,MAAb,SAAoBE,MAASC,OAAO,WAGxC,sBAAKH,UAAU,OAAf,UACI,oBAAGA,UAAU,OAAb,yBAAiCL,EAAjC,YACA,oBAAGK,UAAU,OAAb,uBAA+BN,EAAYE,KAAKQ,SAAhD,mBCiBLC,MAhCf,WACE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAS,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDV,EAAOU,EAASC,OAAOC,UACvBV,EAAQQ,EAASC,OAAOE,cAHV,SAMZC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDhB,EAAlD,gBAA6DE,EAA7D,+BAAwFc,qCAChGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAQe,GACRC,QAAQC,IAAIF,MAVE,2CAAH,qDAmBf,OANAG,qBAAU,WACRjB,IACAe,QAAQC,IAAI,MAAOtB,GACnBqB,QAAQC,IAAI,OAAQpB,KAEnB,CAACF,EAAKE,IAEP,qBAAKT,UAAU,MAAf,SAEGW,EAAKf,MAAO,cAAC,EAAD,CAASF,YAAaiB,OCnB1BoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5e33376e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\nimport { Card } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\n\r\nconst WeatherCard = ({ weatherData }) => {\r\n    let tempF = (weatherData.main.temp * 9/5) + 32\r\n    return(\r\n    <Card>\r\n        <Card.Content>\r\n            <div className=\"main\">\r\n                <p className=\"header\">{weatherData.name}</p>\r\n                <div className=\"flex\">\r\n                    <p className=\"day\">Day: {moment().format('dddd')}</p>\r\n                    <p className=\"day\">{moment().format('LL')}</p>\r\n                </div>\r\n\r\n                <div className=\"flex\">\r\n                    <p className=\"temp\">Temprature: {tempF} &deg;F</p>\r\n                    <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n                </div>\r\n            </div>\r\n        </Card.Content>\r\n    </Card>\r\n    )}\r\n\r\nexport default WeatherCard;","import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nfunction App() {\n  const [lat, setLat] = useState([])\n  const [long, setLong] = useState([])\n  const [data, setData] = useState([]);\n\n  const fetchData = async () => {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n  await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n    .then(res => res.json())\n    .then(result => {\n      setData(result)\n      console.log(result);\n    });\n  }\n  useEffect(() => {\n    fetchData()\n    console.log(\"Lat\", lat)\n    console.log(\"Long\", long)\n\n  }, [lat, long]);\n  return (\n    <div className=\"App\">\n\n      {data.main &&<Weather weatherData={data}/>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}